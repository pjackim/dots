#! /bin/python3
import os
from subprocess import Popen, PIPE
import sys
from time import sleep
from EwwWindows import getWindows


def execute_command(command, args):
    # t = subp.Popen([command, args])
    return subp.check_output([command, args])

def exe(command, args = []):
    temp = []
    
    os.system(command + args + " &")


def getNodeName(id):
    p = Popen(['xtitle', str(id)], shell=False, stdout=PIPE, stderr=PIPE)
    try:
        stdout1, stderr1 = p.communicate(timeout=1)
        return str(stdout1)
    except:
        pass


windows = getWindows()
for win in windows:
    p = Popen(win, shell=False, stdout=PIPE, stderr=PIPE)
    name = str(win[2])[5:]
    os.system("echo " + name + " >> $HOME/bin/autostart/logs/startup_instances")
    try:
        p.communicate(timeout=.2)
    except:
        pass

# p1 = Popen(['konsole', '-p', 'name=clear-m3-1', '--name', 'clear-m3-1', '--profile', 'Clear', '-e', 'applicationLauncher', 'thokr', '&'], shell=False, stdout=PIPE, stderr=PIPE)
# try:
#     p1.communicate(timeout=.2)
# except:
#     pass

# p2 = Popen(['konsole', '-p', 'name=clear-m2-2', '--name', 'clear-m2-2', '--profile', 'Clear', '-e', 'applicationLauncher', 'sssnake -S -s 10 -f -j 5','&'], shell=False, stdout=PIPE, stderr=PIPE)
# try:
#     p2.communicate(timeout=.2)
# except:
#     pass

# p3 = Popen(['konsole', '-p', 'name=clear-m1', '-p', 'font=Iosevka,10', '--name', 'clear-m1', '--profile', 'Clear', '-e', 'applicationLauncher', 'neofetch', '&'], shell=False, stdout=PIPE, stderr=PIPE)
# try:
#     p3.communicate(timeout=.2)
# except:
#     pass

# p4 = Popen(['konsole', '-p', 'name=clear-m2-1', '--name', 'clear-m2-1', '--profile', 'Clear','-e', 'applicationLauncher', 'ls','&'], shell=False, stdout=PIPE, stderr=PIPE)
# try:
#     p4.communicate(timeout=.2)
# except:
#     pass

sleep(1)
pb = Popen(['bspc', 'query', '-N'], shell=False, stdout=PIPE, stderr=PIPE)
try:
    stdout1, stderr1 = pb.communicate(timeout=1)
    t = str(stdout1).replace("\\n", " ")
    t = t[2:-1]
    nodes = t.split(" ")
    for node in nodes:
        
        name = getNodeName(node)
        if "clear" in name:
            os.system("bspc node "+node+" --flag sticky=on")
            print(node, name, "---- Sticky:", sep="\t")
        else:
            print(node, name, sep="\t")
        
except:
    pass
